tasks:
  # Perception is a task comprising of the find_objects and find_grasps subtasks
  perceive:
    params:
    - obj

    var:
    - cube_idx
    - grasps

    steps:
    - action: find_object
      params:
        obj: params.obj
      var:
      - found_idx
      - found_obj

    - action: find_grasps
      params:
        segmented_obj: var.found_obj
      var:
      - grasps

    - op: assign
      params:
        var_name: cube_idx
        value: var.found_idx
      var:
      - cube_idx

  # Approaching a pickup or dropoff location
  approach:
    params:
      - pre_loc
      - loc

    steps:
    # Move to the location and untuck the arm. Assume the torso is 0 and arm
    # is tucked
    - action: move
      params:
        location: params.pre_loc

    - action: torso
      params:
        height: 0.4

    - action: arm
      params:
        poses: trajectories.tuck_to_stow

    # Clear out the costmap
    - action: look
      params:
        pose: {x: 1.5, y: 0.0, z: -1.0, frame: "base_link"}

    - action: look
      params:
        pose: {x: 50.0, y: 0.0, z: -1.0, frame: "base_link"}

    # Move to the actual location and put the arm in ready
    - action: move
      params:
        location: params.loc

    - action: arm
      params:
        poses: poses.ready

  # Departing a pickup or dropoff location.
  depart:
    params:
      - loc
      - post_loc

    steps:
    # Set the arm to ready, and then to stow. Assume the torso is at max height
    - action: arm
      params:
        poses: poses.ready

    - action: arm
      params:
        poses: poses.stow

    - action: move
      params:
        location: params.post_loc

    - action: arm
      params:
        poses: trajectories.stow_to_tuck

    - action: torso
      params:
        height: 0.0

  # Task used for testing subsets of the main task
  test:
    steps:
    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."

    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
        affect: sad

    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
        affect: happy

    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
        affect: angry

    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
        affect: calm

    - action: speak
      params:
        text: "A robot may not injure a human being or, through inaction, allow a human being to come to harm."
        affect: nervous

  # The main fetch and deliver task that we want to make robust
  main:
    steps:
    - action: beep
      params:
        beep: cheerful
        async: true

    # - action: torso
    #   params:
    #     height: 0.4

    # - action: arm
    #   params:
    #     poses: poses.tuck

    # - action: torso
    #   params:
    #     height: 0.0

    # - action: beep
    #   params:
    #     beep: playful
    #     async: true

    # - task: approach
    #   params:
    #     pre_loc: locations.pre_table1
    #     loc: locations.table1

    - action: look
      params:
        pose: {x: 1.5, y: 0.0, z: -1.0, frame: "base_link"}

    - action: beep
      params:
        beep: surprised
        async: true

    - task: perceive
      params:
        obj: objects.cube
      var:
      - cube_idx
      - grasps

    - action: beep
      params:
        beep: unsure
        async: true

    - action: pick
      params:
        cube_idx: var.cube_idx
        grasps: var.grasps

    - action: beep
      params:
        beep: happy
        async: true

    - task: depart
      params:
        loc: locations.table1
        post_loc: locations.post_table1

    - action: beep
      params:
        beep: excited
        async: true

    - task: approach
      params:
        pre_loc: locations.pre_table2
        loc: locations.table2

    - action: look
      params:
        pose: {x: 1.5, y: 0.0, z: -1.0, frame: "base_link"}

    - action: beep
      params:
        beep: unsure
        async: true

    - action: place

    - action: beep
      params:
        beep: proud
        async: true

    - task: depart
      params:
        loc: locations.table2
        post_loc: locations.post_table2

    - action: beep
      params:
        beep: happy
