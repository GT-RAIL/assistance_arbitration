# The package from where to fetch the actions files
actions: task_executor.actions

tasks:
  #### Vanilla tasks
  task1:
    steps:
    - op: assign
      params:
        var_name: output_value
        expr: 3
      var:
      - output_value

    - loop: trigger_thrice
      params:
        condition: var.output_value
        loop_body:
          task: task1_loop
          params:
            input_value: var.output_value
          var:
          - output_value

    - action: wait
      params:
        duration: 5.0

    - action: set_string
      params:
        string_data: "and now we bow..."

  task1_loop:
    params:
    - input_value
    var:
    - output_value

    steps:
    - action: trigger
      var:
      - success

    - action: integers
      params:
        input_value: params.input_value
      var:
      - output_value

  #### Choice tests
  choice_test:
    params:
    - param1
    - param2

    var:
    - var1

    steps:
    - choice: choice1
      params:
        condition: "(params.param1 is None and params.param2 is not None)"
        if_true:
          op: assign
          params:
            var_name: var1
            expr: 1
          var:
          - var1
        if_false:
          op: assign
          params:
            var_name: var1
            expr: 2
          var:
          - var1

    - choice: choice2
      params:
        condition: params.param1 == 1
        if_true:
          op: assign
          params:
            var_name: var1
            expr: 3
          var:
          - var1

  #### Loop tests
  loop_test:
    params:
    - num_iterations

    steps:
    - op: assign
      params:
        var_name: cond
        expr: 0
      var:
      - cond

    - loop: loop
      params:
        condition: var.cond < params.num_iterations
        loop_body:
          task: loop_body_test
          params:
            cond: var.cond
          var:
          - cond

  loop_body_test:
    params:
    - cond

    var:
    - cond

    steps:
    - action: trigger
      var:
      - success

    - op: increment
      params:
        var_name: cond
        expr: params.cond + 1
      var:
      - cond

  #### Op tests
  index_into_container:
    params:
    - container
    - idx

    var:
    - entity

    steps:
    - op: index
      params:
        var_name: entity
        expr: params.container[params.idx]
      var:
      - entity

  fibonacci:
    params:
    - n

    var:
    - value

    steps:
    - op: assign
      params:
        var_name: fib
        expr: "lambda x,y=[1,1]:([(y.append(y[-1]+y[-2]),y[-1])[1] for i in range(1+x-len(y))],y[x])[1]"
      var:
      - fib

    - op: assign
      params:
        var_name: value
        expr: var.fib(params.n)
      var:
      - value
