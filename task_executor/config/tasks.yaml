tasks:
  # Setup for the main tasks
  setup:
    steps:
    - action: torso
      params:
        height: 0.4

    - task: reset_arm
      params:
        poses: joint_poses.tuck

    - action: update_beliefs
      params:
        beliefs:
          DOOR_1_OPEN: true
          DOOR_2_OPEN: true

    - action: torso
      params:
        height: 0.0

  # Reset the arm by removing all attached objects and clearing the scene. Then
  # move the arm through the specified poses. If none are specified, then don't
  # move
  reset_arm:
    params:
    - poses

    steps:
    - action: gripper
      params:
        command: open

    - action: detach_objects

    - action: update_beliefs
      params:
        beliefs:
          GRIPPER_HAS_OBJECT: false

    - op: make_boolean
      params:
        var_name: poses
        bool_name: poses_exist
      var:
      - poses_exist

    - choice: move_to_poses
      params:
        condition: var.poses_exist
        if_true:
          action: arm
          params:
            poses: params.poses
            look_at_gripper: true

  # Approaching a pickup or dropoff location
  approach:
    params:
      - pre_loc
      - loc

    steps:
    # Move to the location and untuck the arm. Assume the torso is 0 and arm
    # is tucked
    - action: move
      params:
        location: params.pre_loc

    - action: torso
      params:
        height: 0.4

    - action: arm
      params:
        poses: trajectories.tuck_to_stow

    # Clear out the costmap
    - action: look
      params:
        pose: {x: 1.5, y: 0.0, z: -1.0, frame: "base_link"}

    - action: look
      params:
        pose: {x: 50.0, y: 0.0, z: -1.0, frame: "base_link"}

    # Move to the actual location and put the arm in ready
    - action: move
      params:
        location: params.loc

    - action: arm
      params:
        poses: joint_poses.ready

  # Departing a pickup or dropoff location.
  depart:
    params:
      - loc
      - post_loc

    steps:
    # Set the arm to ready, and then to stow. Assume the torso is at max height
    - action: arm
      params:
        poses: joint_poses.ready

    - action: arm
      params:
        poses: joint_poses.stow

    # Clear out the costmap
    - action: look
      params:
        pose: {x: 1.5, y: 0.0, z: -1.0, frame: "base_link"}

    - action: look
      params:
        pose: {x: 50.0, y: 0.0, z: -1.0, frame: "base_link"}

    # Move to the departure staging area and tuck the arm
    - action: move
      params:
        location: params.post_loc

    - action: arm
      params:
        poses: trajectories.stow_to_tuck

    - action: torso
      params:
        height: 0.0

  # Go through a door
  traverse_doorway:
    params:
    - pre_loc
    - post_loc
    - door_belief

    var:
    - obstacle_in_front

    steps:
    - action: move
      params:
        location: params.pre_loc

    - action: check_obstacle_in_front
      params:
        belief: params.door_belief
        abort_on_true: true
      var:
      - obstacle_in_front

    - action: move
      params:
        location: params.post_loc

  # Perception is a task comprising of the find_objects and find_grasps subtasks
  perceive:
    params:
    - obj

    var:
    - cube_idx
    - grasps

    steps:
    - action: look
      params:
        pose: gripper_poses.object_look_location

    # Need a wait here so that the segmentation node can update its cached point
    # cloud. Otherwise we get loads of misaligned segmentations
    - action: wait
      params:
        duration: 1.0

    - action: find_object
      params:
        obj: params.obj
      var:
      - found_idx
      - found_obj

    - action: find_grasps
      params:
        segmented_obj: var.found_obj
      var:
      - grasps

    - op: assign
      params:
        var_name: cube_idx
        value: var.found_idx
      var:
      - cube_idx

  # Pick up a recognized cube given its grasps
  pick:
    params:
    - cube_idx
    - grasps
    - abort_on_false

    var:
    - grasped

    steps:
    - action: pick
      params:
        cube_idx: params.cube_idx
        grasps: params.grasps

    # This action updates the belief for the gripper having the object
    - action: verify_grasp
      params:
        abort_on_false: params.abort_on_false
      var:
      - grasped

    - choice: update_beliefs
      params:
        condition: var.grasped
        if_true:
          action: update_beliefs
          params:
            beliefs:
              CUBE_AT_PICKUP_1: false
              CUBE_AT_PICKUP_2: false

  # Find and pickup the cube
  perceive_and_pick:
    params:
    - obj
    - abort_on_false
    - reset_arm

    var:
    - grasped

    steps:
    # Reset the arm if needed
    - choice: reset_arm
      params:
        condition: params.reset_arm
        if_true:
          task: reset_arm
          params:
            poses: joint_poses.ready

    # First search for the object
    - task: perceive
      params:
        obj: params.obj
      var:
      - cube_idx
      - grasps

    # Then send the result to pick
    - task: pick
      params:
        cube_idx: var.cube_idx
        grasps: var.grasps
        abort_on_false: params.abort_on_false
      var:
      - grasped

  # Place the cube at the desired location
  place:
    steps:
    - action: look
      params:
        pose: gripper_poses.object_look_location

    - action: place

    - action: arm
      params:
        poses: joint_poses.ready

    - action: look
      params:
        pose: gripper_poses.object_look_location

    - action: find_object
      params:
        obj: objects.cube
      var:
      - found_idx
      - found_obj

    - action: update_beliefs
      params:
        beliefs:
          GRIPPER_HAS_OBJECT: false
          CUBE_AT_DROPOFF: true

  # The alternate, easy, fetch and deliver task that we want to make robust
  easy:
    steps:
    - action: beep
      params:
        beep: cheerful
        async: true

    - task: setup

    # Simulate some reasoning that leads us to believe the object of interest is
    # at location 1
    - action: update_beliefs
      params:
        beliefs:
          CUBE_AT_PICKUP_1: true

    - action: beep
      params:
        beep: playful
        async: true

    - task: approach
      params:
        pre_loc: locations.pre_table1
        loc: locations.table1

    - action: beep
      params:
        beep: surprised
        async: true

    - task: perceive_and_pick
      params:
        obj: objects.cube
        abort_on_false: false
        reset_arm: false
      var:
      - grasped

    - choice: try_pick_again
      params:
        condition: var.grasped
        if_false:
          task: perceive_and_pick
          params:
            obj: objects.cube
            abort_on_false: true
            reset_arm: true
          var:
          - grasped

    - action: beep
      params:
        beep: happy
        async: true

    - task: depart
      params:
        loc: locations.table1
        post_loc: locations.post_table1

    - action: beep
      params:
        beep: excited
        async: true

    - task: traverse_doorway
      params:
        pre_loc: locations.door1_out_facing_in
        post_loc: locations.door1_in_facing_in
        door_belief: DOOR_1_OPEN
      var:
      - obstacle_in_front

    - task: approach
      params:
        pre_loc: locations.pre_shelf
        loc: locations.shelf

    - action: beep
      params:
        beep: unsure
        async: true

    - task: place

    - action: beep
      params:
        beep: proud
        async: true

    - task: depart
      params:
        loc: locations.shelf
        post_loc: locations.post_shelf

    - action: beep
      params:
        beep: happy

  # The alternate, hard, fetch and deliver task that we also want to make robust
  hard:
    steps:
    - action: beep
      params:
        beep: cheerful
        async: true

    - task: setup

    # Simulate some reasoning that leads us to believe the object of interest is
    # at location 2
    - action: update_beliefs
      params:
        beliefs:
          CUBE_AT_PICKUP_2: true

    - action: beep
      params:
        beep: playful
        async: true

    - task: traverse_doorway
      params:
        pre_loc: locations.door2_out_facing_in
        post_loc: locations.door2_in_facing_in
        door_belief: DOOR_2_OPEN
      var:
      - obstacle_in_front

    - task: approach
      params:
        pre_loc: locations.pre_table2
        loc: locations.table2

    - action: beep
      params:
        beep: surprised
        async: true

    - task: perceive_and_pick
      params:
        obj: objects.cube
        abort_on_false: false
        reset_arm: false
      var:
      - grasped

    - choice: try_pick_again
      params:
        condition: var.grasped
        if_false:
          task: perceive_and_pick
          params:
            obj: objects.cube
            abort_on_false: true
            reset_arm: true
          var:
          - grasped

    - action: beep
      params:
        beep: happy
        async: true

    - task: depart
      params:
        loc: locations.table2
        post_loc: locations.post_table2

    - action: beep
      params:
        beep: excited
        async: true

    - task: traverse_doorway
      params:
        pre_loc: locations.door2_in_facing_out
        post_loc: locations.door2_out_facing_out
        door_belief: DOOR_2_OPEN
      var:
      - obstacle_in_front

    - task: traverse_doorway
      params:
        pre_loc: locations.door1_out_facing_in
        post_loc: locations.door1_in_facing_in
        door_belief: DOOR_1_OPEN
      var:
      - obstacle_in_front

    - task: approach
      params:
        pre_loc: locations.pre_shelf
        loc: locations.shelf

    - action: beep
      params:
        beep: unsure
        async: true

    - task: place

    - action: beep
      params:
        beep: proud
        async: true

    - task: depart
      params:
        loc: locations.shelf
        post_loc: locations.post_shelf

    - action: beep
      params:
        beep: happy
